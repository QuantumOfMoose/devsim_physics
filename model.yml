#yamllint -d relaxed foo.yml
# The python module will be aware of how to create
# the appropriate derivative names
---
# material parameters
epsilon_0:
  comment: "permittivity of free space"
  value: 8.854187817e-14
  unit:  "F*cm^-2"
eps_r:
  comment: "relative permittivity"
  unit: "1"
  material: "silicon"
    value: 11.7
  material: "SiO2"
    value: 3.9
---
name: "permittivity"
command: "edge_model"
options:
  name:     "permittivity"
  equation: "eps_r*epsilon_0"
---
# the command name implies that the edge models will be created from a node model
name: ["Potential@n0", "Potential@n1"]
command: "edge_from_node_model"
options:
  node_model: "Potential"
---
name: "ElectricField"
command: "edge_average_model"
options:
  edge_model:   "ElectricField"
  node_model:   "Potential"
  average_type: "negative_gradient"
derivatives:
# handles Potential@n0, Potential@n1
  node_variables:
    - "Potential"
documentation: >-
  .. math::

    \texttt{ElectricField} &= - \nabla \texttt{Potential} \\
---
name: "DisplacementField"
command: "edge_model"
options:
  name:         "DisplacementField"
  equation:     "permittivity*ElectricField"
  display_type: "nodisplay"
derivatives:
  variables:
    - "Potential"
documentation: >-
  .. math::

    \texttt{DisplacementField} &= \epsilon \texttt{ElectricField}

---
# parameters
Tref: "300"

parameters:
  - name:  "T"
    desc:  "Lattice Temperature"
    value: "300"
    unit:  "Kelvin"
  - name:  "k"
    desc:  "Boltzmann Constant"
    value: ""
    unit:  ""
  - name:  "q"
    desc:  "Electron Charge"
    value: ""
    unit:  ""
  - name: "EG"
    material: "Silicon"

node_models:
  - name: "kT"
    equation: "k*T"
  - name: "inv_kT"
    equation: "1/kT"
    unit: ""
  - name: "inv_2kT"
    equation: "0.5*inv_kT"
  - name: "Ec"
    equation: "q*Xaffinity + Potential*invKT"
  - name: "Ec_qc"
    equation: "Ec - Λc"
  - name: "Ev"
    equation: "Ec - EG"
  - name: "Ev_qc"
    equation: "Ev + Λv"
  - name: "EG_qc"
    equation: "EG - Λc - Λv"
  - name: "n_i"
    equation: "sqrt(Nc*Nv)*exp(-EG_qc*inv2KT)"
  - name: "η_c"
    equation: "(EFn - Ec_qc)*invKT"
  - name: "η_v":
    equation: "(Ev_qc - EFp)*invKT"
  - name: "T32"
    equation: "pow(T, 1.5)"
  - name: "Tnorm"
    equation: "T/Tref"
  - name: "Tnorm_32"
    equation: "pow(Tnorm, 1.5)"
  - name: "Nc"
    equation: "NC300*Tnorm_32"
  - name: "Nv"
    equation: "NV300*Tnorm_32"
  - name: "Electrons_Boltzmann"
    equation: "NC*exp(η_C)"
  - name: "Holes_Boltzmann"
    equation: "NV*exp(η_V)"
  # assume Boltzmann
  - name: "η_C_intrinsic"
    equation: "log(IntrinsicElectrons/NC)"
# assume Fermi
  - name: "η_C_intrinsic"
    equation: "invFermi(IntrinsicElectrons/NC)"
# remaining
  - name: "EFn_intrinsic"
    equation: "KT * η_C_intrinsic + Ec_qc"
  - name: "EFp_intrinsic"
    equation: "EFn_intrinsic"
  - name: "Electrons_Fermi"
    equation: "NC*Fermi(η_C)"
  - name: "Holes_Fermi"
    equation: "NV*Fermi(η_V)"
### Current
### need to break down other driving force options
#### TODO: edge average model
  - name: "vdiff"
    equation: "(Potential@n0 - Potential@n1)/V_t"
  - name: "Bern01"
    equation: "B(vdiff)"
  - name: "Bern10"
    equation: "Bern01 + vdiff"
  - name: "Jn"
    equation: "ElectronCharge*mu_n*EdgeInverseLength*V_t*(Electrons@n1*Bern10  - Electrons@n0*Bern01)"
  - name: "Jp"
    equation: "ElectronCharge*mu_p*EdgeInverseLength*V_t*(Holes@n0*Bern10 - Holes@n1*Bern01)"

#### Potential
#### n_i depends on Potential, but gets cancelled out when determining EG
#### look into tanh function
  - name: "IntrinsicElectrons"
    equation: "n_i*exp(Potential/V_t)"
  - name: "IntrinsicHoles"
    equation: "n_i^2/IntrinsicElectrons"
  - name: "#IntrinsicHoles"
    equation: "n_i^2/IntrinsicElectrons"
  - name: "#IntrinsicCharge"
    equation: "-ElectronCharge * kahan3(IntrinsicHoles, -IntrinsicElectrons, NetDoping)"
## TODO: work out signs
  - name: "IntrinsicCharge"
    equation: "ElectronCharge*(2*n_i*cosh(Potential/V_t) + NetDoping)"
## TODO: Electrostatic E Field for Poissons Equation, also use edge_average_model
  - name: "ElectricField"
    type: "edge_average_model"
    average_type: "negative_gradient"
    node_model:   "Potential"
  - name: "PotentialEdgeFlux"
    equation: "Permittivity * ElectricField"

#### Contacts


#### Solution
#### Potential Only

##Solve for Potential
#### Dependent equations:
#### Calculate EFn, EFp from intrinsic electrons and holes
  - name: "EFn"
    equation: "Ef"
  - name: "EFp"
    equation: "Ef"

equation_systems:
  - potential_only: ""
  - drift_diffusion: ""

## TODO mobility



